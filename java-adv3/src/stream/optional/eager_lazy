
즉시 평가(eager evaluation)
 - 값 혹은 객체를 바로 생성하거나 계산하는 것
지연 평가(lazy evaluation)
 - 값이 실제로 필요할 때(사용될 때)까지 계산을 미루는 것

 자바는 기본적으로 즉시평가를 한다. (LogMain2 참조)
 자바 연산자 우선순위상 메서드를 호출하기 전에 괄호안의 내용을 먼저 계산된다.
 따라서 조건에 따라 실행되지 않는 메소드의 경우에도 전달된 연산은 항상 계산되지만 메소드는 실행되지 않는다.

 그렇다면 조건에 따라 계산이 실행되지 않게 하려면 어떻게 해야하나?
 가장 간단한 방법으로는 if 조건으로 체크 후 실행하면된다. 하지만 이렇게 되면 매번 if 문으로 체크를 해야하는 불편함이 있다.
 두번째 방법으로는 람다(Supplier)를 전달하는 방법으로 해결하면 된다. (Supplier.get()은 lazy evaluation 이다)

Optional::   |   orElse  vs  orElseGet
평가          |   즉시평가      지연평가
파라테머 타입   |   Integer     lambda

그럼 언제써?????
orElse      ->  값이 이미 존재할 가능성이 높거나 객체 생성비용이 크지 않은 경우, 연산이 없는 상수나 변수의 경우
orElseGet   ->  생성비용이 큰 경우, 값이 들어있지 않을 확률이 높을 경우



Optional 은 좋긴한데.... 항상 정답은 아니고.... -> 요청을 받는 쪽(클라이언트) 에서 어떻게 받을까? 라는 생각으로 하는 것이 좋아
무분별하게 사용하면 오히려 코드의 가독성과 유지보수성이 떨어질 수 있음
************* 핵심은 메소드의 반환값에만 Optional 을 쓰자!!!!!!!!!!! 라는 것! (field 값에는 쓰지마라)
애초에 도입의 목적 자체가 메소드의 반환값을 체크하기 위한 것이다

그리고 반환값으로 null 은 웬만하면 사용하지말고
빈 자료구조를 반환해라
(ex. new ArrayList() , Collections.emptyList())

isPresent() 와 get() 조합을 직접 사용하지마라(아~~~~~~~~~~주 가끔 피치못할때를 제외하곤 사용ㄴㄴ) -> null 체크랑 다를 게 없음
-> orElse, orElseGet, orElseThrow, ifPresentOrElse, .map, .filter 를 잘 활용하자
특히 .get() 메소드는 예제나 간단한 테스트에서만 사용하는 것을 권장

